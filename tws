#!/usr/bin/env python
"""
Use `tws --help` to see usage instructions

To make this cli available as an executable on your path, follow this guide:
https://dbader.org/blog/how-to-make-command-line-commands-with-python
"""
import subprocess
import sys
from os import system
import click


@click.group()
def cli():
    """
    A command line utility to aid in local development using docker-compose,
    to save ridiculous amounts of typing cranky commands.

    This is not intended for use in ci/cd or production, where you only have to
    type commands once in your setup ;)

    You'll need to run `pip install click` to use this utility.
    """
    pass


@click.command()
def bash():
    """ Run just the web server (daphne) and dependent services, no hot reloading.
    """
    system("docker-compose run web bash")


@click.command()
def build():
    """Build the docker images specified in the docker-compose file.

    This will install relevant requirements into the image, so needs to be done after modifying
    the requirements.txt file, for example.
    """
    system("docker-compose build")


@click.command()
def dev():
    """ Run a hot reloading server for local development.
    Do not use in production, as this uses django's runserver.
    """
    system("docker-compose up")


@click.command()
def daphne():
    """ Run just the web server (daphne) and dependent services, no hot reloading.
    """
    system("docker-compose run web daphne server.app.asgi:application")


# TODO combine install and lock commands using an option, eg install --create-lock wipes and recreates the package lock
@click.command(context_settings={"ignore_unknown_options": True})
@click.argument("args", nargs=-1)
def install(args):
    """ Runs yarn install in the node container
    """
    if len(args) > 0:
        system(f"docker-compose run node yarn add {' '.join(args)}")
    else:
        system("docker-compose run node yarn install")


@click.command()
@click.argument("args", nargs=-1)
def manage(args):
    """ Invoke a django management command in the server container.
    """
    arg_string = " ".join(args)
    system(f"docker-compose run web python manage.py {arg_string}")


@click.command()
@click.option(
    "--with-volumes",
    is_flag=True,
    default=False,
    show_default=True,
    help="Purge all volumes for containers (postgres, pgadmin, etc). HIGHLY DESTRUCTIVE.",
)
def prune(with_volumes):
    """ Find and destroy all containers, optionally removing their persistent volumes

    See https://www.digitalocean.com/community/tutorials/how-to-remove-docker-images-containers-and-volumes#a-docker-cheat-sheet

    """
    volume_flag = "-v" if with_volumes else ""
    # Flake8 has to be ignored because grep's escape characters are valid but flake thinks it's python
    system(r"docker ps -a | grep 'tws_\|twined-server_' | awk '{print $1}' | xargs docker rm %s" % volume_flag)


@click.command()
def stop():
    """ Stop any running containers
    """
    system("docker-compose stop")


@click.command()
@click.option(
    "--tee-sys",
    is_flag=True,
    default=False,
    show_default=True,
    help="Pytest captures sys.stdout and sys.stderr, and only flushes them to sys if a test fails. Setting this option true makes pytest tee them instead of capturing, useful if printing messages while developing tests.",
)
@click.argument("args", nargs=-1)
def test(tee_sys, args):
    """ Run django tests in the server container. By default runs all tests in `server/test` folder.
    Individual tests or files can be specified as an argument, e.g.
     tws test server/test/test_sockets.py::test_example_consumer runs just the test specified after :: in that file.
    """
    test_spec = " ".join(args) if len(args) >= 1 else "server/tests"
    capture_spec = "--capture=tee-sys" if tee_sys else ""
    p = subprocess.run(
        f"docker-compose run -e DJANGO_SETTINGS_MODULE=server.settings.test web pytest {capture_spec} {test_spec}",
        shell=True,
    )
    sys.exit(p.returncode)


cli.add_command(bash)
cli.add_command(build)
cli.add_command(dev)
cli.add_command(daphne)
cli.add_command(install)
cli.add_command(manage)
cli.add_command(prune)
cli.add_command(stop)
cli.add_command(test)


if __name__ == "__main__":
    cli()
